name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Dependencies
      run: |
        npm install -g @railway/cli
        sudo apt-get install -y jq curl
    
    - name: Setup Railway Project
      id: railway-setup
      run: |
        # Check if we have a project token or personal access token
        # Try to use the token as a project token first
        DEPLOY_OUTPUT=$(railway up --detach --json 2>&1 || echo "PROJECT_TOKEN_FAILED")
        
        if [[ "$DEPLOY_OUTPUT" == *"PROJECT_TOKEN_FAILED"* ]] || [[ "$DEPLOY_OUTPUT" == *"Project Token not found"* ]]; then
          echo "Project token not found, creating new project with personal access token..."
          
          # Create project using Railway API
          PROJECT_NAME="${{ github.event.repository.name }}-${{ github.repository_owner }}"
          
          # Create new project
          CREATE_RESPONSE=$(curl -s -X POST https://backboard.railway.app/graphql \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"query\":\"mutation { projectCreate(input: {name: \\\"$PROJECT_NAME\\\"}) { id name } }\"}")
          
          echo "Create project response: $CREATE_RESPONSE"
          PROJECT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.data.projectCreate.id')
          
          if [ "$PROJECT_ID" != "null" ] && [ -n "$PROJECT_ID" ]; then
            echo "Created Railway project: $PROJECT_ID"
            
            # Create a deployment token for the project
            TOKEN_RESPONSE=$(curl -s -X POST https://backboard.railway.app/graphql \
              -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"query\":\"mutation { projectTokenCreate(input: {projectId: \\\"$PROJECT_ID\\\", name: \\\"GitHub Actions\\\"}) { token } }\"}")
            
            echo "Token creation response: $TOKEN_RESPONSE"
            PROJECT_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.data.projectTokenCreate.token')
            
            if [ "$PROJECT_TOKEN" != "null" ] && [ -n "$PROJECT_TOKEN" ]; then
              echo "Created project token"
              # Deploy with the new project token
              RAILWAY_TOKEN="$PROJECT_TOKEN" railway up --detach
            else
              echo "Failed to create project token"
              exit 1
            fi
          else
            echo "Failed to create Railway project"
            exit 1
          fi
        else
          echo "Deployed successfully with existing project token"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || '' }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || '' }}
      if: github.ref == 'refs/heads/main'
